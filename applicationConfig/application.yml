#The application.yml file serves as the general application-wide configuration
#for your microservices ecosystem.
#It usually contains shared configurations that are applicable across multiple services.

#When to Use This File?
#This file provides default values for all services.
#Each service (order-service, product-service, gateway, etc.)
#can override these settings in their own application-{service}.yml files.



#Hereâ€™s an optimized example for your setup
#Example
#server:
#  port: 0 # Let the service pick an available port dynamically
#
#spring:
#  application:
#    name: ecommerce-app # General name, overridden in service-specific configs
#  config:
#    import: "optional:configserver:http://localhost:8888" # load configuration from Config Server
#  datasource:
#    url: jdbc:postgresql://localhost:5432/ecommerce_db
#    username: postgres
#    password: password
#    driver-class-name: org.postgresql.Driver
#  jpa:
#    hibernate:
#      ddl-auto: update
#    show-sql: true
#    properties:
#      hibernate:
#        format_sql: true
#        dialect: org.hibernate.dialect.PostgreSQLDialect
#  redis:
#    host: localhost
#    port: 6379
#    timeout: 2000
#    cache:
#      type: REDIS

#eureka:
#  client:
#    service-url:
#      defaultZone: http://localhost:8761/eureka/ # Eureka service registry
#    fetch-registry: true
#    register-with-eureka: true
#  instance:
#    prefer-ip-address: true # Use IP instead of hostname
#    instance-id: ${spring.application.name}:${random.value}
#
#logging:
#  level:
#    root: INFO
#    org.springframework.web: DEBUG
#    com.yourcompany: DEBUG

#management:
#  endpoints:
#    web:
#      exposure:
#        include: "*"
#  endpoint:
#    health:
#      show-details: always
#  health:
#    redis:
#      enabled: true
#    db:
      #enabled: true