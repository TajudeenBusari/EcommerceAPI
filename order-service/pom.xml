<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.tjtechy</groupId>
		<artifactId>ECommerceMicroservices</artifactId>
		<version>0.0.1</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<artifactId>order-service</artifactId>
	<version>0.0.1</version>
	<name>order-service</name>
	<description>Order Service Module for ECommerce Microservices</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2024.0.0</spring-cloud.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!--Spring boot Starter WebFlux (For WebClient)-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>

		<!-- Eureka Client -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<!-- Spring Boot Actuator (Optional - Useful for Monitoring) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- I don't need this anymore because the ProductDto class has been moved
		 to the common-utils module-->
<!--        <dependency>-->
<!--            <groupId>com.tjtechy</groupId>-->
<!--            <artifactId>product-service</artifactId>-->
<!--            <version>0.0.1</version>-->
<!--            <scope>compile</scope>-->
<!--        </dependency>-->
		<dependency>
			<groupId>com.tjtechy</groupId>
			<artifactId>system</artifactId>
			<version>0.0.1</version>
		</dependency>

		<dependency>
			<groupId>com.tjtechy</groupId>
			<artifactId>exception</artifactId>
			<version>0.0.1</version>
		</dependency>
		<!-- Add common-utils Dependency -->
		<dependency>
			<groupId>com.tjtechy</groupId>
			<artifactId>common-utils</artifactId>
			<version>0.0.1</version>
<!--			<scope>test</scope>-->
		</dependency>

		<!--dev tools-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
			<version>2.18.2</version>
		</dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
        </dependency>

        <!--Add spring cloud config client dependency so application can use the
        config server config file-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<!--Add spring cloud bootstrap dependency so application can use the
		config server config file-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hibernate6</artifactId>
			<version>2.18.2</version> <!-- Use the latest version -->
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- PostgreSQL Test Container -->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>1.20.4</version>
			<scope>test</scope>
		</dependency>

		<!--JUnit-->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>1.20.4</version>
			<scope>test</scope>
		</dependency>

		<!-- Embedded Redis for Testing -->

		<!-- https://mvnrepository.com/artifact/com.github.kstyrc/embedded-redis
		BETTER FOR REDIS EMBEDDED TESTING. This: it.ozimov is causing some issues-->
		<dependency>
			<groupId>com.github.kstyrc</groupId>
			<artifactId>embedded-redis</artifactId>
			<version>0.6</version>
			<scope>test</scope>
		</dependency>

<!--		<dependency>-->
<!--			<groupId>it.ozimov</groupId>-->
<!--			<artifactId>embedded-redis</artifactId>-->
<!--			<version>0.7.2</version>-->
<!--			<scope>test</scope>-->
<!--		</dependency>-->

		<!-- Optional: For using JSON serialization in Redis
			 You don't need this if we are not serializing in redis
			 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.18.2</version>
		</dependency>

		<!-- Add dependencies for caching -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>

		<!-- WireMock Dependency -->
		<dependency>
			<groupId>org.wiremock</groupId>
			<artifactId>wiremock</artifactId>
			<version>3.0.1</version>
			<scope>test</scope>
		</dependency>

		<!--MockWbServer dependency is designed only for testing, keep it under scope
		It spins up local HTTP Server, you can queue response on and
		verify requests made to it-perfect for integration test service to service communication -->
		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>mockwebserver</artifactId>
			<version>5.0.0-alpha.14</version>
			<scope>test</scope>
		</dependency>

<!--		&lt;!&ndash; JavaTime dependency to deserialize LocalDate &ndash;&gt;-->
<!--		<dependency>-->
<!--			<groupId>com.fasterxml.jackson.datatype</groupId>-->
<!--			<artifactId>jackson-datatype-jsr310</artifactId>-->
<!--			<version>2.18.2</version>-->
<!--		</dependency>-->

	</dependencies>

	<!-- Spring Cloud Dependency Management.
	Actually not needed here because, already defined in the p
	 parent ECommerceMicroservices pom.xml -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-bom</artifactId>
				<version>11.0.15</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<!-- Maven Compiler Plugin -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.13.0</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
