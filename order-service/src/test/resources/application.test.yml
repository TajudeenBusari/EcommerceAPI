server:
  port: 9096
spring:
  application:
    name: order-service
  profiles:
    active: test
  datasource:
    url: ${POSTGRES_URL} #Dynamically set by the test container.
    username: testuser #Dynamically set by the test container.
    password: testpassword #Dynamically set by the test container.
    driver-class-name: org.postgresql.Driver
  redis:
    host: ${REDIS_HOST} #Dynamically set by the test container.
    port: ${REDIS_PORT} #Dynamically set by the test container.
    cache-prefix: order-service
  cache:
    type: REDIS
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  logging:
    level:
      root: INFO
      org.springframework: DEBUG
      org.hibernate.SQL: DEBUG
logging:
  level:
    org.springframework.web.reactive.function.client.WebClient: DEBUG
#  product-service:
#    url: http://localhost:8083/api/v1 # WireMock URL for product-service
#product:
#  service:
#    base-url: ${PRODUCT_SERVICE_BASE_URL:http://localhost:8083/api/v1}
#api:
#  endpoint:
#    base-url: /api/v1
#product-service:
#  url: http://localhost:8083/api/v1 # WireMock URL for product-service
#  timeout: 5000 # Timeout for the WebClient in milliseconds
#  retry:
#    max-attempts: 3
#    backoff:
#      delay: 1000
#      max-delay: 5000
#      multiplier: 2.0